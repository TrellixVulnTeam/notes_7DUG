1 .JavaScript Facts #1...

"NaN (Not-a-Number) is the only JavaScript value which is not equal to itself when comparing with any of the comparison operators"
Why?
Here's the short story...
According to IEEE 754 specifications, any operation performed on NaN values should yield a false value or should raise an error.


2. JavaScript is single threaded ,synchronous language.
3. Everything in javascript happen inside exicution contex-
  3.1 excultion context  divide into two phase
    3.1.1 Memory Creatiob phase- in this phase all veriable And function get memory.
    3.1.2 Code exicution phase- in this phase actual code exicution is happend

4. Hoisting in javascript --
   JavaScript, Hoisting is the default behavior of moving all 
   the declarations 
   at the top of the scope before code execution. Basically, 
   it gives us an advantage that no matter where functions and
   variables are declared, they are moved to the top of their 
   scope regardless of whether their scope is global or local.
    example:
      console.log(num);
      isValid(123)
      var num=10
      function isValid(){

      }
5. let =https://www.w3schools.com/js/js_let.asp
   const=https://www.w3schools.com/js/js_const.asp      

6. JS is simply a scripting language, adding functionality 
into your website. JSX is an addition to the JavaScript 
syntax which is a mixture of both HTML and JavaScript. 
Both JS and JSX are interchangeable but JSX makes the 
code easier to understand for users.
7. var is not a global scope, its scope depend where we have declear it
8. scope chaining

9. a=100 --- this is acidental variable , this is not part of Hoisting  and
this is like window.a=100, these are only part of code exicution
window is browser api.
console.log("Run");
function newTry() {
  a = 100; //window.a = 100
  var c = (d = "Aghaz Junaid");
}

window.c = "Arun";
newTry();

console.log(d);
10.Definitions to read
  - Accidental variables-When a undeclared variable 
  is referenced, javascript creates a new variable 
  in the global object. In the following Example-1 
  let's say the purpose of languages is to only reference a 
  variable in the "myArray" function. If we don't use var to 
  declare it a global variable will be created.
  What is Scope?
  - Scope- Scope in JavaScript refers to the accessibility or 
    visibility of variables. That is, which parts of a program have 
    access to the variable or where the variable is visible.
  - Scope Chaining -When a variable is used in JavaScript, the JavaScript engine 
    will try to find the variable’s value in the current scope. If it could 
    not find the variable, it will look into the outer scope and will continue
     to do so until it finds the variable or reaches global scope.
    
    If it’s still could not find the variable, it will either implicitly 
    declare the variable in the global scope (if not in strict mode) or 
    return an error.
  For example:
  let foo = 'foo';
  function bar() {
    let baz = 'baz';
    // Prints 'baz'
    console.log(baz);
    // Prints 'foo'
    console.log(foo);
    number = 42;
    console.log(number);  // Prints 42
  }
  bar();
  When the function bar() is executed, the JavaScript engine looks for the 
  baz variable and finds it in the current scope. Next, it looks for foo 
  variable in the current scope and it can’t find it there, so it looks for 
  the variable in outer scope and finds it there (i.e global scope).

  After that, we assign 42 to the number variable, so the JavaScript engine 
  looks for the number variable in the current scope and after that in the
  outer scope.
  If the script is not in strict mode, the engine will create a new variable 
  named number and assign 42 to it or return an error (if not in strict mode).
  
  So when a variable is used the engine will traverse the scope chain until 
  it finds the variable.
  
  
   - Types of functions-
     
   
11. Types of scope in JS
- Global Scope - Any variable that’s not inside any function 
  or block (a pair of curly braces), is inside the global scope. 
  The variables in global scope can be accessed from anywhere in the program

- Functional/Local Scope-Variables declared inside a function is inside
   the local scope. They can only be accessed from within that function, 
   that means they can’t be accessed from the outside code
- Block or Script Scope -ES6 introduced let and const variables,
  unlike var variables, they can be scoped to the nearest pair of curly braces. 
  That means, they can’t be accessed from outside that pair of curly braces
  
  
  ***We can see that var variables can be used outside the block, 
  that is, var variables are not block scoped.


12. append VS appendChild :

  12.1. append does not have a return value while appendChild returns the 
        appended object.
  12.2. append accepts object and Strings while .appendChild accepts only
        objects .
  12.3. via append we can add multiple element  while appendChild allows only 
        a single item.


13. innerText vs textContent
    i) textContent gets the content of all elements, 
       including <script> and <style> elements. In contrast, 
       innerText only shows human-readable elements.
    2) textContent returns every element in the node. 
    In contrast, innerText is aware of styling and 
    won't return the text of hidden elements.
    13.1 : innerText will give text only
    13.2  : textContent will give space also if there any inside element
     <div>
      innerHTML vs textContent
      <style>
        div {
          color: rgb(243, 164, 61);
        }
      </style>
    </div>
  </body>
  <script>
    const div = document.getElementsByTagName("div");

    console.log(div[0].innerText);
    //innerHTML vs textContent
    console.log(div[0].textContent);
    /*
       innerHTML vs textContent
      
        div {
          color: rgb(243, 164, 61);
        }
      
    
    */
14. template leteral and template string
    var a=`hello ${name}`
    back ticks
15.creattion phase is part of exicuatiom context where is scan code from top to buttom.
   and alocate memory to var veriable and function .it intilize variable with undefined
   and function with entire function

16. A call stack is a mechanism for an interpreter (like the JavaScript 
    interpreter in a web browser) to keep track of its place in a script that 
    calls multiple functions
17.
  1. write code
  2. creation phase
  3. exicution phase
  4. clearing memory
18. let and const:
     let and const hosted in block or script scope, so we can access the after
     intilization
     these are part of script or block scope
     let: let x = "John Doe";
          let x = 0;
          // SyntaxError: 'x' has already been declared
        example2:
            let x = "John Doe";
            x=2; //work

      const:   
          const x = "John Doe";
          const x = 0;
          // SyntaxError: 'x' has already been declared
        example2:
            const x = "John Doe";
            x=2; //TypeError  
19. type of error in javascript
    let: let x = "John Doe";
          let x = 0;
          // SyntaxError: 'x' has already been declared
        example2:
            let x = "John Doe";
            x=2; //work
        example3: 
            console.log(a);/referenceError
            let a=10;
      const:   
          const x = "John Doe";
          let x = 0;
          // SyntaxError: 'x' has already been declared
        example2:
            const x = "John Doe";
            x=2; //TypeError  

20.   Is let & const are getting hoisted

yes these types of variables are are getting hoisted.but they are hoisted script scope
we cannot access it before is intilization.

- They're using a scope known as script scope when defined in global area
- They're using a scope known as block scope when defined in a {} block
- Script & block is the same only their places is different

  var a = 1;
  let b = 2;
  const c = true;

  function meTry() {
    var a1 = 2;
    let b2 = 3;

    {
      let c1 = true;
      var g1 = 2;
    }
  }

  meTry();
21. datatype in javascript:
  1. premitive : pass by value
     boolean
     string
     number
     null
     undefine
     symbol : https://levelup.gitconnected.com/everything-you-need-to-know-about-javascript-symbols-24650a163038
  2. non premitive: pass by reference

    2.1:  object
    2.2: function
So in this case, c1 will only be in the memory when the code reaches to 
it's curly braces

22. Destructuring: The destructuring assignment syntax is a JavaScript expression 
that makes it possible to unpack values from arrays, 
or properties from objects, into distinct variables.


23. Lexical Enviroment : Lexical Enviroment is created while creation of exicuation
context, it is local memory plus Lexical Enviroment of its Lexical parent

24. Detail about null: https://dmitripavlutin.com/javascript-null/#:~:text=The%20JavaScript%20specification%20says%20about,an%20object%20wasn%27t%20created
25. deep and Shallow copy: https://www.freecodecamp.org/news/copying-stuff-in-javascript-how-to-differentiate-between-deep-and-shallow-copies-b6d8c1ef09cd/
    deep and Shallow copy by deepclone and clone : https://blog.logrocket.com/methods-for-deep-cloning-objects-in-javascript/

Link: https://www.w3schools.com/react/react_es6_destructuring.asp
Array Destructuring: https://davidwalsh.name/array-destructuring
Aliases with JavaScript Destructuring :https://davidwalsh.name/destructuring-alias

26 . parseInt vs Number vs +1
     in parseInt(2.6) = 2
     Number(2.6)=2.6
     +2.6 =2.6

27.  What is an Immediately Invoked Function in JavaScript?
     An Immediately Invoked Function ( known as IIFE and pronounced as IIFY) 
     is a function that runs as soon as it is defined.
     Syntax of IIFE :
      (function(){ 
        // Do something;
      })();
28 . Event loop: 
             
17. useMemo. memo, useCallback
  17.1.useMemo : The React useMemo Hook returns a memoized value.
    "Think of memoization as caching a value so that it does not need to be 
    recalculated."
    The useMemo Hook only runs when one of its dependencies update.
    This can improve performance.


callstack present inside javascript engine , everything in javascript exicute inside callstack
29: Higher Order Function: function which take another function as argument or
 return another function know as higher order function

 function x(){
   console.log("Hello")
 }
 function y(x){
   x();
 }
note: here y is higer order function and x is callback function
29: method of array:
   set 
   set.values()
   set.add(value)

   how to clear object and array


   higher order function


30: rest and spread operator:
   rest operator= re   


31.An arrow function expression is a compact alternative to a traditional function expression, but is limited and can't be used in all situations.

Differences & Limitations:

Does not have its own bindings to this or super, and should not be used as methods.
Does not have new.target keyword.
Not suitable for call, apply and bind methods, which generally rely on establishing a scope.
Can not be used as constructors.
Can not use yield, within its body.





31: First Class Function / first class  Citizens: The Ability of funtion to use as values 
or can pass as argument and return from function...


32: A temporal dead zone (TDZ) is the area of a block where a variable is inaccessible until 
the moment the computer completely initializes it with a value.

33. IIFE(Immediately-invoked Function Expression):
An Immediately-invoked Function Expression (IIFE for friends) is a way to execute functions immediately,
as soon as they are created.

IIFEs are very useful because they don’t pollute the global object, 
and they are a simple way to isolate variables declarations.
(function() {
  /* */
})()