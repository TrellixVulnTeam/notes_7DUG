1 .JavaScript Facts #1...

"NaN (Not-a-Number) is the only JavaScript value which is not equal to itself when comparing with any of the comparison operators"

Why?

Here's the short story...

According to IEEE 754 specifications, any operation performed on NaN values should yield a false value or should raise an error.
2. JavaScript is single threaded ,synchronous language.
3. Everything in javascript happen inside exicution contex-
  3.1 excultion context  divide into two phase
    3.1.1 Memory Creatiob phase- in this phase all veriable And function get memory.
    3.1.2 Code exicution phase- in this phase actual code exicution is happend

4. Hoisting in javascript --
   JavaScript, Hoisting is the default behavior of moving all 
   the declarations 
   at the top of the scope before code execution. Basically, 
   it gives us an advantage that no matter where functions and
   variables are declared, they are moved to the top of their 
   scope regardless of whether their scope is global or local.
    example:
      console.log(num);
      isValid(123)
      var num=10
      function isValid(){

      }
5. let =https://www.w3schools.com/js/js_let.asp
   const=https://www.w3schools.com/js/js_const.asp      

6. JS is simply a scripting language, adding functionality 
into your website. JSX is an addition to the JavaScript 
syntax which is a mixture of both HTML and JavaScript. 
Both JS and JSX are interchangeable but JSX makes the 
code easier to understand for users.
7. var is not a global scope, its scope depend where we have declear it
8. scope chaining

9. a=100 --- this is acidental variable , this is not part of Hoisting  and
this is like window.a=100, these are only part of code exicution
window is browser api.
console.log("Run");
function newTry() {
  a = 100; //window.a = 100
  var c = (d = "Aghaz Junaid");
}

window.c = "Arun";
newTry();

console.log(d);
10.Definitions to read
  - Accidental variables-When a undeclared variable 
  is referenced, javascript creates a new variable 
  in the global object. In the following Example-1 
  let's say the purpose of languages is to only reference a 
  variable in the "myArray" function. If we don't use var to 
  declare it a global variable will be created.
  What is Scope?
  - Scope- Scope in JavaScript refers to the accessibility or 
    visibility of variables. That is, which parts of a program have 
    access to the variable or where the variable is visible.
  - Scope Chaining -When a variable is used in JavaScript, the JavaScript engine 
    will try to find the variable’s value in the current scope. If it could 
    not find the variable, it will look into the outer scope and will continue
     to do so until it finds the variable or reaches global scope.
    
    If it’s still could not find the variable, it will either implicitly 
    declare the variable in the global scope (if not in strict mode) or 
    return an error.
  For example:
  let foo = 'foo';
  function bar() {
    let baz = 'baz';
    // Prints 'baz'
    console.log(baz);
    // Prints 'foo'
    console.log(foo);
    number = 42;
    console.log(number);  // Prints 42
  }
  bar();
  When the function bar() is executed, the JavaScript engine looks for the 
  baz variable and finds it in the current scope. Next, it looks for foo 
  variable in the current scope and it can’t find it there, so it looks for 
  the variable in outer scope and finds it there (i.e global scope).

  After that, we assign 42 to the number variable, so the JavaScript engine 
  looks for the number variable in the current scope and after that in the
  outer scope.
  If the script is not in strict mode, the engine will create a new variable 
  named number and assign 42 to it or return an error (if not in strict mode).
  
  So when a variable is used the engine will traverse the scope chain until 
  it finds the variable.
  
  
  - Hoisting
  - Types of functions
   
11. Types of scope in JS
- Global Scope - Any variable that’s not inside any function 
  or block (a pair of curly braces), is inside the global scope. 
  The variables in global scope can be accessed from anywhere in the program

- Functional/Local Scope-Variables declared inside a function is inside
   the local scope. They can only be accessed from within that function, 
   that means they can’t be accessed from the outside code
- Block or Script Scope -ES6 introduced let and const variables,
  unlike var variables, they can be scoped to the nearest pair of curly braces. 
  That means, they can’t be accessed from outside that pair of curly braces
  
  
  ***We can see that var variables can be used outside the block, 
  that is, var variables are not block scoped.