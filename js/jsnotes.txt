1 .JavaScript Facts #1...

"NaN (Not-a-Number) is the only JavaScript value which is not equal to itself when comparing with any of the comparison operators"

Why?

Here's the short story...

According to IEEE 754 specifications, any operation performed on NaN values should yield a false value or should raise an error.
2. JavaScript is single threaded ,synchronous language.
3. Everything in javascript happen inside exicution contex-
  3.1 excultion context  divide into two phase
    3.1.1 Memory Creatiob phase- in this phase all veriable And function get memory.
    3.1.2 Code exicution phase- in this phase actual code exicution is happend

4. Hoisting in javascript --
   JavaScript, Hoisting is the default behavior of moving all 
   the declarations 
   at the top of the scope before code execution. Basically, 
   it gives us an advantage that no matter where functions and
   variables are declared, they are moved to the top of their 
   scope regardless of whether their scope is global or local.
    example:
      console.log(num);
      isValid(123)
      var num=10
      function isValid(){

      }
5. let =https://www.w3schools.com/js/js_let.asp
   const=https://www.w3schools.com/js/js_const.asp      

6. JS is simply a scripting language, adding functionality 
into your website. JSX is an addition to the JavaScript 
syntax which is a mixture of both HTML and JavaScript. 
Both JS and JSX are interchangeable but JSX makes the 
code easier to understand for users.
7. var is not a global scope, its scope depend where we have declear it
8. scope chaining

9. a=100 --- this is acidental variable , this is not part of Hoisting  and
this is like window.a=100, these are only part of code exicution
window is browser api.
console.log("Run");
function newTry() {
  a = 100; //window.a = 100
  var c = (d = "Aghaz Junaid");
}

window.c = "Arun";
newTry();

console.log(d);
10.Definitions to read
  - Accidental variables-When a undeclared variable 
  is referenced, javascript creates a new variable 
  in the global object. In the following Example-1 
  let's say the purpose of languages is to only reference a 
  variable in the "myArray" function. If we don't use var to 
  declare it a global variable will be created.
  What is Scope?
  - Scope- Scope in JavaScript refers to the accessibility or 
    visibility of variables. That is, which parts of a program have 
    access to the variable or where the variable is visible.
  - Scope Chaining
  - Hoisting
  - Types of functions
   
11. Types of scope in JS
- Global Scope - Any variable thatâ€™s not inside any function 
  or block (a pair of curly braces), is inside the global scope. 
  The variables in global scope can be accessed from anywhere in the program

- Functional/Local Scope
- Block or Script Scope
